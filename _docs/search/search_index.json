{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ParGov web \u00b7 \ud83d\uddf3\ufe0f","text":"<p>A reimplementation of the Parliaments and Governments Database (ParlGov)</p> <p>parlgov.fly.dev \u00b7 \ud83c\udf10 \u2014 github.com/hdigital/parlgov-web \u00b7 \ud83d\udee0\ufe0f</p> <p>The project reimplements ParlGov (ParlGov legacy) and provides a minimal, maintainable, and tested code base (ParlGov web). The reimplementation uses best practices for Django code and modern Python tools. The main data tables, pages, and validations have been migrated for an initial version.</p> <p></p>"},{"location":"development/","title":"Development \u00b7 \ud83d\udcbb","text":"<p>See Python development dependencies in <code>requirements-dev.txt</code> and a documentation of environment variables in <code>.env.example</code>. uv is used as a venv/pip replacement for some development tasks.</p>"},{"location":"development/#commands","title":"Commands \u00b7 \ud83c\udfc3\ud83c\udffc","text":"<p>Use just command runner for local development and in codespace.</p> <p>List commands with</p> <pre><code>just\n</code></pre>"},{"location":"development/#testing","title":"Testing \u00b7 \ud83e\uddea","text":"<p>Run tests and check test coverage with</p> <pre><code># ./app\npytest --cov\n</code></pre> <p>Tests are run randomly with pytest-randomly. This can be disabled with</p> <pre><code>pytest --cov --randomly-dont-reorganize\n</code></pre>"},{"location":"development/#database","title":"Database \u00b7 \ud83e\uded9","text":""},{"location":"development/#tables","title":"Tables \u00b7 \ud83d\udcc2","text":"<p>Database tables use prefixes.</p> <ul> <li>data \u2014 data tables (e.g., parties, elections, cabinets)</li> <li>docs \u2014 documentation tables (e.g., codebook, news)</li> <li>view \u2013 main data tables (database views, see below)</li> </ul> <p>Additional tables are included by Django in the app database (<code>parlgov.sqlite</code>).</p> <p>A visualization of the data tables is provided in <code>graph-models_data.png</code> (see below).</p>"},{"location":"development/#normalization","title":"Normalization \u00b7 \u2714\ufe0f","text":"<p>The database created with the Django models is normalized except for the <code>election</code> attribute of the <code>Cabinet</code> model. An election is added or updated to a cabinet on save. A later change to the election that changes the previous election for the cabinet is not updated for the cabinet automatically.</p> <p>All cabinets' elections can be checked and updated with</p> <pre><code># ./app\npython manage.py update_cabinet_election\n</code></pre>"},{"location":"development/#views","title":"Views \u00b7 \ud83d\udd2c","text":"<p>There are three main tables (parties, elections, cabinets) provided as database views. They include the most frequently used information from the primary database tables.</p> <p>These views are created during the initialization of the project (see Data import).</p> <p>The three main views are not included as Django models in the project.</p>"},{"location":"development/#miscellaneous","title":"Miscellaneous \u00b7 \ud83d\uddc2\ufe0f","text":""},{"location":"development/#documentation","title":"Documentation \u00b7 \ud83d\udcda","text":"<p>Start documentation at localhost:80</p> <pre><code>mkdocs serve --dev-addr localhost:8888\n</code></pre> <p>Build static site documentation</p> <pre><code>mkdocs build --clean --strict\n</code></pre>"},{"location":"development/#graph-models","title":"Graph models \u00b7 \ud83d\udcd0","text":"<p>Create or update graph models \u2014 locally only</p> <pre><code>./scripts/graph-data-models.sh\n</code></pre> <p>The script needs graphviz installed and is included only locally to keep testing, Docker, and codespace configuration lean.</p> <p>Install on macOS with homebrew</p> <pre><code>brew install graphviz\n</code></pre> <p>Install on Ubuntu and Debian (e.g., codespace) with</p> <pre><code>sudo apt-get install graphviz graphviz-dev\n</code></pre> <p></p>"},{"location":"migration/","title":"Migration \u00b7 \ud83d\udc63","text":""},{"location":"migration/#approach","title":"Approach","text":"<p>The main data tables and some of the docs have been migrated from ParlGov legacy and are presented on ParlGov web pages. The SQLite database <code>parlgov-experimental.db</code> (see ParlGov Dataverse) is used for the migration. A mapping of the migrated tables and their new table names is provided in <code>migration-check.csv</code>.</p> <p>The main information is summarized in the tables<code>view_party</code>, <code>view_election</code>, and <code>view_cabinet</code>, which are included as database views.</p> <p>Database tables now include a <code>data_*</code> or <code>docs_*</code> prefix to distinguish them from the database tables created by Django.</p> <p>All tables include a <code>created_at</code> and an <code>updated_at</code> column. The values are set to the date of the migration import and do not record an entry's initial coding and last update.</p> <p>Codes used in the variable <code>type_id</code> are documented in the table <code>data_code</code>.</p>"},{"location":"migration/#parties","title":"Parties","text":"<p>Parties, party families, name changes, and party changes have been migrated from ParlGov legacy.</p> <p>Party Facts provides a link file with ParlGov IDs, which should be used to link party IDs with other datasets. Party IDs from Party Facts, Manifesto, and CHESS are not included in ParlGov web.</p> <p>Party positions and party IDs from other datasets were not updated for recent versions of ParlGov legacy.</p>"},{"location":"migration/#elections","title":"Elections","text":"<p>Election results have been migrated from ParlGov legacy.</p> <p>ParlGov legacy includes tables that record changes in the composition of parliaments (<code>parliament_change</code>) and parliament compositions (<code>parliament_composition</code>). This data is used to calculate the seat strength of cabinet parties based on <code>viewcalc_parliament_composition</code>. The data and the scripts for the calculation have not been migrated.</p>"},{"location":"migration/#cabinets","title":"Cabinets","text":"<p>Cabinet parties have been migrated from ParlGov legacy.</p> <p>Cabinet seats have not been included (see above).</p> <p>ParlGov legacy includes an experimental and incomplete recording of confidence votes and cabinet support parties that have not been migrated to ParlGov web.</p>"},{"location":"migration/#docs","title":"Docs","text":"<p>Codebook pages and news entries have been migrated from ParlGov legacy.</p> <p>All database tables and variables are documented in ParlGov legacy, which includes checks to ensure the documentation covers all tables and variables. This documentation and the checks have not been migrated for the initial version of ParlGov web. ParlGov legacy also includes a table that documents JSON keys.</p> <p>Data sources are documented with keys in the data tables and these keys are mostly documented and checked in ParlGov legacy. A migration of the keys needs a substantial revision and is not included in the initial version of ParlGov web.</p>"},{"location":"migration/#external","title":"External","text":"<p>ParlGov legacy includes additional information, such as party IDs and party names from other datasets, in database tables with the prefix <code>external_*</code>.</p> <p>These tables were not updated for recent versions of ParlGov legacy and are not needed in a new version of ParlGov.</p> <p></p>"},{"location":"project-history/","title":"Project history \u00b7 \ud83d\udc74\ud83c\udffc","text":"<p>This summary of ParlGov legacy describes the significant steps of the code evolution and summarizes its shortcomings. A public version of the web page was accessible between 2010 and 2021.</p>"},{"location":"project-history/#history","title":"History","text":"<p>The earliest Django version of ParlGov I found is from 2007. It was based on a SQLite database I created previously. I liked Django right away but was hesitant to tie the project to the framework fully. Hence, I initially implemented the Django web app as a \"user interface\" to the database and started hosting it on Webfaction. At the time, I did not follow the best practices recommended by Django but kept the focus on the database. It was also the time when I learned more advanced Python programming concepts through learning Django. This legacy is still visible in the code more than a decade later.</p> <p>I completed and made public an initial version of the page in 2010. At the time, I updated and significantly improved the structure of the database and the models by using better table and variable names as well as by restructuring the database. This year, I also started using version control, Mercurial at the time, so that all changes since 2010 can be tracked. Before 2010, the web app required a login.</p> <p>In 2014, I conducted a major refactoring of the codebase and added the Bootstrap CSS framework, which led to a significantly more professional page layout.</p> <p>Even in 2015, I knew that the web app needed significant refactoring. Newer Django versions depreciated some approaches that the code relied on, Python 3 became mainstream, and there was too much outdated code.</p> <p>Between 2015 and 2021, I could not find funding to implement a refactoring, and I was not in a position to do these updates myself. That is why the project code base stalled, although it was happily running online all those years. During this period, I added data validations, minor bug fixes, and minuscule enhancements.</p> <p>In 2021, our web hosting provider, Webfaction, was closed, and ParlGov legacy was no longer publicly accessible. The main information about the project, news, and data were now provided with a static page at parlgov.org. At the time, I created a Docker configuration that allows to run the legacy version locally, and that has been used to create stable releases. Internally, we used web hosting at PythonAnywhere to run the legacy app and to update the data. The page was not publicly available due to performance and security issues.</p> <p>In 2024, I reimplemented the main models, pages, and data checks in ParlGov web. The new implementation and the data import revealed some minor data issues that were fixed in ParlGov legacy before the stable release. A final stable release based on the legacy app was published in 2024.</p>"},{"location":"project-history/#legacy-issues","title":"Legacy issues","text":"<p>What are the primary dead ends in the code base that make a migration of ParlGov legacy without a reimplementation so challenging?</p> <p>First, the database is not aligned with Django migrations. SQLite does not enforce data types. The original data was not added through Django and was edited manually, so that there are some inconsistencies in the database. Migrations were added to Django only in the early 2010s, and the apps' models can not be altered with Django migrations.</p> <p>Second, the project has not been migrated to newer Django versions. Django introduced some new approaches and depreciated previous approaches. Some better best practices have evolved in the Django community, but none of them have been included in the code base.</p> <p>Third, the entire project structure is opaque. In the early parts of the project, I ran into issues with circular imports, so I ended up implementing Django apps that are way too large.</p> <p>Fourth, views and templates are too complex and too large to repair. They have evolved over the years, adding features without properly structuring or modernizing.</p> <p>Fifth, no tests are included in the code base, so modifying and updating the app is risky and potentially error-prone.</p> <p>Sixth, frontend technologies have evolved over the last decade. None of these tools, Bootstrap as an exception, is used in the app.</p> <p>Nevertheless, I firmly believe that the models have stood the test of time. There are a few minor adjustments I would like to make, and many removals are needed. I am convinced that the major models are very robust and include a lot of valuable experience gained over the years.</p> <p>Therefore, the new version is based on the models from the legacy app. All other code has been written from scratch, and this is not a \"second system syndrome\" but a hard-won insight.</p> <p></p>"},{"location":"usage/","title":"Usage \u00b7 \u2699\ufe0f","text":""},{"location":"usage/#run","title":"Run \u00b7 \ud83d\ude80","text":"<p>Use codespace, locally, or with Docker.</p> <p>Start server in codespace and open page in the PORTS tab.</p> <pre><code>just serve\n</code></pre> <p>Start locally with Django at localhost:8000</p> <pre><code># ./app\npython manage.py runserver\n</code></pre> <p>Use with Docker at localhost:8000</p> <pre><code>docker compose up\n</code></pre> <p>Create an admin user (see Django docs) to edit data with</p> <pre><code># ./app\npython manage.py createsuperuser\n</code></pre> <p>See the example of a production deployment in <code>Dockerfile-flyio</code>.</p>"},{"location":"usage/#installation","title":"Installation \u00b7 \ud83d\udee0\ufe0f","text":"<p>Run in codespace, install locally, or use Docker (see above).</p> <p>Codespace is fully configured. Load the data and run a local server with just commands.</p> <pre><code># source .venv/bin/activate\njust load-data\njust serve\n</code></pre> <p>Local install and project initialization examples are provided in <code>init-dev-project.sh</code>.</p> <pre><code>bash ./scripts/init-dev-project.sh\nsource .venv/bin/activate\ncd app\npython manage.py runserver\n</code></pre> <p>Docker version requires a local database.</p> <pre><code>docker compose up --build\n</code></pre> <p>See the section Data import below or use init the script in a Docker container terminal.</p> <pre><code>\u00bb # /app\n\u00bb bash ./scripts/init-dev-project.sh\n</code></pre>"},{"location":"usage/#data-import","title":"Data import \u00b7 \ud83c\udfd7\ufe0f","text":"<p>Import data from ParlGov stable release, create database views, and create an admin user to access the Django admin pages for data editing.</p> <pre><code># ./app\npython manage.py loaddata parlgov-fixture.json\ncat apps/views_data/views-data.sql | python manage.py dbshell\npython manage.py createsuperuser\n</code></pre>"},{"location":"usage/#data-validation","title":"Data validation \u00b7 \ud83d\udd75\ud83c\udffc\u200d\u2640\ufe0f","text":"<p>All data is validated during the addition to the database with Django. The <code>validate_data</code> command can run these and additional validations (see below).</p> <pre><code># ./app\npython manage.py validate_data\n</code></pre> <p>Additional validations include</p> <ul> <li>parties<ul> <li>inclusion criteria check \u2014 see priority in <code>run_include_checks(party)</code></li> </ul> </li> <li>elections<ul> <li>one election result for election</li> <li>seats sum equals seats_total</li> <li>vote share sum in defined interval</li> <li>no seat party (first loser) included</li> <li>max. one party with vote share &lt; 1.0% and 0 seats</li> </ul> </li> <li>cabinets<ul> <li>PM for one party specified</li> <li>previous election included</li> </ul> </li> </ul> <p>Additional scripts data checks</p> <ul> <li><code>cabinet_update_election</code> \u2014 check and update election variable in all cabinets</li> <li><code>election_no_seats_party</code> \u2014\u00a0show elections with missing coding of first loser   (largest party no seats)</li> </ul>"},{"location":"usage/#codebook","title":"Codebook \u00b7 \ud83d\udcd9","text":"<p>All codebook sections are recorded in the database as Markdown entries. They can be edited using the ParlGov page.</p> <p>A Markdown version of the codebook based on the sections from the database is available on the ParlGov page and can be dumped with a Django management command.</p> <pre><code># ./app\npython manage.py create_codebook\n</code></pre> <p>A shell script creates the codebook, formats the Markdown text file, renders a PDF, and adds the two documents to the documentation.</p> <pre><code>bash scripts/create-codebook.sh\n</code></pre>"},{"location":"usage/#api","title":"API \u00b7 \ud83d\udd17","text":"<p>The page provides an API with Django REST framework.</p> <p>It is a read-only API; no login is required.</p> <p>Documentation with an OpenAPI 3 schema is provided in <code>schema.yaml</code>.</p> <p></p>"}]}